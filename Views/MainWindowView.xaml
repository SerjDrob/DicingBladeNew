<hc:GlowWindow
    x:Class="DicingBlade.Views.MainWindowView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:converters="clr-namespace:DicingBlade.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:mcl="clr-namespace:MachineClassLibrary.Machine;assembly=MachineClassLibrary" 
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:model="clr-namespace:DicingBlade.ViewModels"
    xmlns:uc="clr-namespace:MachineControlsLibrary.Controls;assembly=MachineControlsLibrary"
    xmlns:hc="https://handyorg.github.io/handycontrol" 
    Title="04ПП100-М"
    Icon="/Views/7863776561600002497-48.png"
    ActiveGlowColor="{DynamicResource PrimaryColor}" 
   
    d:DataContext="{d:DesignInstance model:MainViewModel, IsDesignTimeCreatable=True}"
    
    WindowStartupLocation="CenterScreen"
    ResizeMode="NoResize"
    WindowState="Maximized"
    mc:Ignorable="d">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="MyDictionary.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            
            <SolidColorBrush x:Key="SignalGreen" Color="MediumSpringGreen" />
            <SolidColorBrush x:Key="SignalRed" Color="IndianRed" />
            <System:Double x:Key="Zero">0</System:Double>
            <System:Double x:Key="Hundred">100</System:Double>
            <System:Double x:Key="Ycoor">69.515</System:Double>
            <System:Double x:Key="CutStrokeThickness">0.002</System:Double>
            <System:Boolean x:Key="TRUE">True</System:Boolean>
            <System:Boolean x:Key="FALSE">False</System:Boolean>
            <Style x:Key="ToolBorder" TargetType="Border">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="CornerRadius" Value="4"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            </Style>
        </ResourceDictionary>
    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Command="{Binding ToTeachCutShiftCommand}" Key="F6"/>
    </Window.InputBindings>
    <i:Interaction.Triggers>
        
        <i:EventTrigger EventName="KeyDown">
            <i:InvokeCommandAction Command="{Binding TestKeyCommand, Mode=OneWay}" 
                                   PassEventArgsToCommand="True"
                                   EventArgsConverter="{StaticResource KeyProcessorArgsConverter}"
                                   EventArgsConverterParameter="{StaticResource TRUE}"/>
        </i:EventTrigger>
       
        <i:EventTrigger EventName="KeyUp">
            <i:InvokeCommandAction Command="{Binding TestKeyCommand, Mode=OneWay}" 
                                   PassEventArgsToCommand="True"
                                   EventArgsConverter="{StaticResource KeyProcessorArgsConverter}"
                                   EventArgsConverterParameter="{StaticResource FALSE}"
                                   />
        </i:EventTrigger>
        
        <!--<i:PropertyChangedTrigger Binding="{Binding WvRotate}">
            <i:ControlStoryboardAction Storyboard="{StaticResource ResourceKey=PathAnimation}" />
        </i:PropertyChangedTrigger>
        <i:PropertyChangedTrigger Binding="{Binding ResetView}">
            <i:ControlStoryboardAction Storyboard="{StaticResource ResourceKey=ResetView}" />
        </i:PropertyChangedTrigger>-->
    </i:Interaction.Triggers>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Menu Grid.ColumnSpan="3">
            <MenuItem Header="Приводы" Command="{Binding MachineSettingsCommand}"/>
            <MenuItem Header="Подложка" Command="{Binding WaferSettingsCommand}" Visibility="{Binding IsNot04PP100, Converter={StaticResource Boolean2VisibilityConverter}}"/>
            <MenuItem Header="Технология" Command="{Binding TechnologySettingsCommand}"/>
            <MenuItem Header="Обучение">
                <MenuItem Command="{Binding ToTeachVideoScaleCommand}" Header="_Масштаб видео" />
                <MenuItem Command="{Binding ToTeachChipSizeCommand}" 
                          Visibility="{Binding IsNot04PP100, Converter={StaticResource Boolean2VisibilityConverter}}"
                          Header="_Размер кристалла" />
            </MenuItem>
        </Menu>
        <ToolBarTray Grid.Row="1" Orientation="Vertical">
            <ToolBar>
                <Button hc:IconElement.Geometry="{StaticResource SpurGearGeometry}"
                        hc:IconElement.Width="15"
                        Command="{Binding MachineSettingsCommand}" 
                        HorizontalAlignment="Stretch">
                    <Button.ToolTip>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Настройки приводов"/>
                            <TextBlock FontWeight="DemiBold"  Text=" H"/>
                        </StackPanel>
                    </Button.ToolTip>
                </Button>
                <Button hc:IconElement.Geometry="{StaticResource RoundWaferGeometry}"
                        hc:IconElement.Width="15"
                        Visibility="{Binding IsNot04PP100, Converter={StaticResource Boolean2VisibilityConverter}}"
                        Command="{Binding WaferSettingsCommand}" 
                        HorizontalAlignment="Stretch">
                    <Button.ToolTip>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Подложка"/>
                            <TextBlock FontWeight="DemiBold"  Text=" F3"/>
                        </StackPanel>
                    </Button.ToolTip>
                </Button>
                <Button hc:IconElement.Geometry="{StaticResource TechnologyGeometry}"
                        hc:IconElement.Width="15"
                        Command="{Binding TechnologySettingsCommand}" 
                        HorizontalAlignment="Stretch"
                        >
                    <Button.ToolTip>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Технология"/>
                            <TextBlock FontWeight="DemiBold"  Text=" F4"/>
                        </StackPanel>
                    </Button.ToolTip>
                </Button>
                
                <Separator/>
                <hc:SplitButton hc:IconElement.Geometry="{StaticResource AcademicHatGeometry}" HorizontalAlignment="Stretch">
                    <hc:SplitButton.DropDownContent>
                        <StackPanel>
                            <MenuItem Command="{Binding ToTeachChipSizeCommand}"
                                      Visibility="{Binding IsNot04PP100, Converter={StaticResource Boolean2VisibilityConverter}}"
                                      >
                                <MenuItem.Icon>
                                    <Path Data="{StaticResource ChipSizeGeometry}" RenderTransformOrigin="0.5 0.5" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform">
                                        <Path.RenderTransform>
                                            <ScaleTransform ScaleY="-1"/>
                                        </Path.RenderTransform>
                                    </Path>
                                </MenuItem.Icon>
                                <MenuItem.Header>
                                    <TextBlock Text="Размер кристалла"/>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem Command="{Binding ToTeachVideoScaleCommand}">
                                <MenuItem.Icon>
                                    <Path Data="{StaticResource ScalingGeometry}" Fill="{StaticResource PrimaryTextBrush}" RenderTransformOrigin="0.5 0.5" Stretch="Uniform">
                                        <Path.RenderTransform>
                                            <ScaleTransform ScaleY="-1"/>
                                        </Path.RenderTransform>
                                    </Path>
                                </MenuItem.Icon>
                                <MenuItem.Header>
                                    <TextBlock Text="Масштаб видео"/>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem Command="{Binding ToTeachCutShiftCommand}" InputGestureText="F6">
                                <MenuItem.Icon>
                                    <Path Data="{StaticResource OffsetGeometry}" RenderTransformOrigin="0.5 0.5" Fill="{StaticResource PrimaryTextBrush}" Stretch="Uniform">
                                        <Path.RenderTransform>
                                            <ScaleTransform ScaleY="-1"/>
                                        </Path.RenderTransform>
                                    </Path>
                                </MenuItem.Icon>
                                <MenuItem.Header>
                                    <TextBlock Text="Смещение реза от ТВ"/>
                                </MenuItem.Header>
                            </MenuItem>
                        </StackPanel>
                    </hc:SplitButton.DropDownContent>
                </hc:SplitButton>
            </ToolBar>
            <ToolBar>
                <StackPanel>
                    <StackPanel.Resources>
                        <Style TargetType="Border">
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="CornerRadius" Value="4"/>
                            <Setter Property="Padding" Value="5"/>
                            <Setter Property="Background" Value="{DynamicResource RegionBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                        </Style>
                        <Style TargetType="uc:AxisState">
                            <Setter Property="PosColor" Value="{StaticResource SignalGreen}"/>
                            <Setter Property="NegColor" Value="{StaticResource SignalRed}"/>
                        </Style>
                    </StackPanel.Resources>

                    <uc:AxisState CoordinateName="X"                                  
                                  Coordinate="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, UpdateSourceTrigger=PropertyChanged, Path=DataContext.XAxis.Position}"  
                                  LmtNeg="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.XAxis.NLmt}"
                                  LmtPos="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.XAxis.PLmt}"
                                  MotionDone="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.XAxis.MotionDone}" 
                                  CmdCoordinate="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.XAxis.CmdPosition}"
                                  />
                    <uc:AxisState CoordinateName="Y"
                                  Coordinate="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.YAxis.Position}"
                                  LmtNeg="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.YAxis.NLmt}"
                                  LmtPos="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.YAxis.PLmt}"
                                  MotionDone="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.YAxis.MotionDone}"
                                  CmdCoordinate="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.YAxis.CmdPosition}"
                                  />
                    <uc:AxisState CoordinateName="Z"
                                  Coordinate="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.ZAxis.Position}"
                                  LmtNeg="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.ZAxis.NLmt}"
                                  LmtPos="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.ZAxis.PLmt}"
                                  MotionDone="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.ZAxis.MotionDone}"
                                  CmdCoordinate="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.ZAxis.CmdPosition}"
                                  />
                    <uc:AxisState CoordinateName="U"
                                  Visibility="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.IsNot04PP100, Converter={StaticResource Boolean2VisibilityConverter}}"
                                  Coordinate="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.UAxis.Position}"
                                  LmtNeg="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.UAxis.NLmt}"
                                  LmtPos="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.UAxis.PLmt}"
                                  MotionDone="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.UAxis.MotionDone}"
                                  CmdCoordinate="{Binding RelativeSource={RelativeSource AncestorType=hc:Window}, Path=DataContext.UAxis.CmdPosition}"
                                  />
                </StackPanel>
                <DockPanel>
                    <Border
                        DockPanel.Dock="Top"
                        Height="60"
                        Style="{StaticResource ToolBorder}"
                        >

                        <Grid>
                            <Grid>
                                <i:Interaction.Triggers>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Fast}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Visible"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Slow}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Micro}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                </i:Interaction.Triggers>
                                <Path Data="{StaticResource HighSpeedGeometry}" 
                              Fill="Red"
                              Stretch="Uniform"
                              RenderTransformOrigin="0.5, 0.5"
                              >
                                    <Path.RenderTransform>
                                        <ScaleTransform ScaleY="-1"/>
                                    </Path.RenderTransform>
                                </Path>
                                <Path Data="{StaticResource HighSpeedArrowGeometry}" 
                              Fill="{StaticResource InfoBrush}"
                                  Stretch="UniformToFill"
                              RenderTransformOrigin="0.5, 0.5"
                              >
                                    <Path.RenderTransform>
                                        <ScaleTransform ScaleY="-1"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                            <Grid>
                                <i:Interaction.Triggers>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Fast}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Slow}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Visible"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Micro}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                </i:Interaction.Triggers>

                                <Path Data="{StaticResource LowSpeedGeometry}" 
                              Fill="Green"
                              Stretch="Uniform"
                              RenderTransformOrigin="0.5, 0.5"
                              >
                                    <Path.RenderTransform>
                                        <ScaleTransform ScaleY="-1"/>
                                    </Path.RenderTransform>
                                </Path>
                                <Path Data="{StaticResource LowSpeedArrowGeometry}" 
                              Fill="{StaticResource InfoBrush}"
                                  Stretch="UniformToFill"
                              RenderTransformOrigin="0.5, 0.5"
                              >
                                    <Path.RenderTransform>
                                        <ScaleTransform ScaleY="-1"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                            <Grid>
                                <i:Interaction.Triggers>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Fast}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Slow}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Step}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Visible"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Micro}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                </i:Interaction.Triggers>
                                <Label Content="ШАГ"
                                       Foreground="red"
                                       HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch"
                                       />
                            </Grid>
                            <Grid>
                                <i:Interaction.Triggers>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Fast}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Slow}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Step}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Hidden"/>
                                    </i:DataTrigger>
                                    <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Micro}">
                                        <i:ChangePropertyAction PropertyName="Visibility" Value="Visible"/>
                                    </i:DataTrigger>
                                </i:Interaction.Triggers>
                                <Label Content="МИКРО"
                                       Foreground="red"
                                       HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch"
                                       />
                            </Grid>
                        </Grid>
                    </Border>
                </DockPanel>
            </ToolBar>
            <ToolBar>
                <Button
                    HorizontalAlignment="Stretch"
                    Command="{Binding AddStepSetCommand}"
                    MinHeight="80"
                    >
                    <TextBlock Text="Раскрой" TextAlignment="Center" Style="{StaticResource TextBlockBoldBaseStyle}">
                            <LineBreak/>
                            <Run Text="подложки"/>
                    </TextBlock>
                </Button>
                <Border Style="{StaticResource ToolBorder}">
                    <StackPanel>
                        <TextBlock Text="Толщина" Style="{StaticResource TextBlockBoldBaseStyle}" Margin="0,0,0,5">
                        <LineBreak/>
                        <Run Text="Подложки"/>
                        </TextBlock>
                        <hc:NumericUpDown Style="{StaticResource NumericUpDownExtend}"
                                      HorizontalContentAlignment="Right"
                                      Minimum="0.05"
                                      MaxHeight="5"
                                      Increment="0.05"
                                      DecimalPlaces="3"
                                          Value="{Binding WaferThickness}"
                                  />
                    </StackPanel>
                </Border>
            </ToolBar>
        </ToolBarTray>
        <Grid Grid.Row="1" Grid.Column="1" Background="{StaticResource DarkDefaultBrush}">
            <Grid.Resources>
                <Style x:Key="Rec1" TargetType="Rectangle">
                    <Setter Property="Margin" Value="3" />
                    <Setter Property="Width" Value="10" />
                    <Setter Property="Height" Value="10" />
                    <Setter Property="Fill" Value="{StaticResource SignalRed}" />
                    <Setter Property="RadiusX" Value="5" />
                    <Setter Property="RadiusY" Value="5" />
                </Style>
                <Style x:Key="Text1" TargetType="TextBlock">
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="TextAlignment" Value="Center" />
                    <Setter Property="Background" Value="AliceBlue" />
                    <Setter Property="FontStretch" Value="Normal" />
                    <Setter Property="FontStyle" Value="Normal" />
                    <Setter Property="FontFamily" Value="Arial Black" />
                    <Setter Property="Foreground" Value="#FFF11616" />
                </Style>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />                
            </Grid.RowDefinitions>

            <ScrollViewer VerticalScrollBarVisibility="Hidden" HorizontalAlignment="Right" Panel.ZIndex="2">
                <StackPanel hc:Growl.GrowlParent="True" VerticalAlignment="Top" Margin="0,10,10,10"/>
            </ScrollViewer>
            
            <GroupBox
            Grid.Row="1"
            Grid.Column="1">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <StackPanel>
                        <GroupBox Header="Шпиндель">
                            <DockPanel>
                                <UniformGrid Columns="1" DockPanel.Dock="Left" >
                                    <Rectangle
                                        Width="5"
                                        Margin="3"                                        
                                        >
                                        <Rectangle.Style>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Fill" Value="{StaticResource SignalRed}" />
                                                <Style.Triggers>
                                                    <DataTrigger Value="True">
                                                        <DataTrigger.Binding>
                                                            <Binding Path="SpindleOnFreq" />
                                                        </DataTrigger.Binding>
                                                        <Setter Property="Fill" Value="{StaticResource SignalGreen}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Rectangle.Style>
                                    </Rectangle>
                                    <Rectangle
                                        Width="5"
                                        Margin="3"
                                        >
                                        <Rectangle.Style>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Fill" Value="{StaticResource SignalRed}" />
                                                <Style.Triggers>
                                                    <DataTrigger Value="True">
                                                        <DataTrigger.Binding>
                                                            <Binding Path="SpindleAccelerating" />
                                                        </DataTrigger.Binding>
                                                        <Setter Property="Fill" Value="{StaticResource SignalGreen}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Rectangle.Style>
                                    </Rectangle>
                                    <Rectangle
                                        Width="5"
                                        Margin="3"
                                       >
                                        <Rectangle.Style>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Fill" Value="{StaticResource SignalRed}" />
                                                <Style.Triggers>
                                                    <DataTrigger Value="True">
                                                        <DataTrigger.Binding>
                                                            <Binding Path="SpindleDeaccelerating" />
                                                        </DataTrigger.Binding>
                                                        <Setter Property="Fill" Value="{StaticResource SignalGreen}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Rectangle.Style>
                                    </Rectangle>
                                    <Rectangle
                                        Width="5"
                                        Margin="3"
                                        DockPanel.Dock="Top">
                                        <Rectangle.Style>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Fill" Value="{StaticResource SignalRed}" />
                                                <Style.Triggers>
                                                    <DataTrigger Value="True">
                                                        <DataTrigger.Binding>
                                                            <Binding Path="SpindleStops" />
                                                        </DataTrigger.Binding>
                                                        <Setter Property="Fill" Value="{StaticResource SignalGreen}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Rectangle.Style>
                                    </Rectangle>
                                </UniformGrid>
                                <StackPanel>
                                    <Grid>
                                        <ProgressBar
                                            Width="150"
                                            Height="30"
                                            Margin="3"
                                            HorizontalAlignment="Center"
                                            Maximum="40000"
                                            Minimum="0"
                                            Value="{Binding SpindleFreqView}"
                                            Style="{StaticResource ProgressBarFlat}"/>
                                        <TextBlock Text="{Binding StringFormat={}{0} Об/мин,Path=SpindleFreqView}"
                                                   Style="{StaticResource TextBlockDefaultWarning}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </Grid>
                                    <Grid>
                                        <ProgressBar
                                            Width="150"
                                            Height="30"
                                            Margin="3"
                                            HorizontalAlignment="Center"
                                            Maximum="12"
                                            Minimum="0"
                                            Value="{Binding SpindleCurrentView}"
                                            Style="{StaticResource ProgressBarFlat}"/>
                                        <TextBlock Text="{Binding StringFormat={}{0} A,Path=SpindleCurrentView}"
                                                   Style="{StaticResource TextBlockDefaultWarning}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </Grid>

                                </StackPanel>
                            </DockPanel>
                        </GroupBox>
                        <GroupBox Header="СОЖ" Visibility="Collapsed">
                            <uc:Indicator Width="150" 
                                          Height="30" 
                                          CurrentLevel="{Binding Flow}" 
                                          MinLevel="0" 
                                          MaxLevel="2" 
                                          Units="л/мин" 
                                          NoLessLevel="1"/>
                        </GroupBox>                        
                    </StackPanel>
                    <GroupBox Header="Процесс"  Grid.Row="1" Style="{StaticResource GroupBoxBaseStyle}">
                        <StackPanel>
                            <ProgressBar Value="{Binding ProcessPercentage}" Style="{StaticResource ProgressBarInfo}"/>
                            <TextBox Text="{Binding ProcessStatus, Mode=OneWay, FallbackValue=Status}" 
                                       TextAlignment="Center"
                                       Background="{StaticResource BackgroundBrush}"
                                       FontStretch="Condensed"
                                       FontFamily="Arial Black" 
                                       Height="22"
                                       Foreground="{StaticResource DangerBrush}"/>
                            <hc:TextBox hc:TitleElement.TitlePlacement="Left" hc:TitleElement.TitleWidth="180" hc:TitleElement.Title="Скорость резки: " 
                                        Text="{Binding FeedSpeedTechnology, StringFormat='{}{0} мм/с'}" IsEnabled="False"/>
                            <hc:TextBox hc:TitleElement.TitlePlacement="Left" hc:TitleElement.TitleWidth="180" hc:TitleElement.Title="Количество проходов: " 
                                        Text="{Binding PassCountTechnology}" IsEnabled="False"/>
                            <hc:TextBox hc:TitleElement.TitlePlacement="Left" hc:TitleElement.Title="Изделие: " Text="{Binding WaferFileName}" IsEnabled="False"/>                            
                        </StackPanel>
                    </GroupBox>
                    <StackPanel Grid.Column="1">
                        <StackPanel.Resources>
                            <Style TargetType="uc:ValveStateButton">
                                <Setter Property="BorderOffColor" Value="{StaticResource SignalRed}"/>
                                <Setter Property="BorderOnColor" Value="{StaticResource SignalGreen}"/>
                                <Setter Property="SensorOffColor"  Value="{StaticResource SignalRed}"/>
                                <Setter Property="SensorOnColor"  Value="{StaticResource SignalGreen}"/>
                                <Setter Property="Margin" Value="1"/>
                                <Setter Property="FontFamily" Value="Noto Sans"/>
                                <Setter Property="MyBackground" Value="#2E8364"/>                                
                            </Style>
                        </StackPanel.Resources>                        
                        <uc:ValveStateButton ValveName="ОХЛАЖДЕНИЕ ШПИНДЕЛЯ" ValveIsOn="{Binding SpindleCoolantSensorView}" SensorIsOn="{Binding SpindleCoolantSensorView}"/>
                        <uc:ValveStateButton ValveName="ВОДА" ValveIsOn="{Binding CoolantValveView}" SensorIsOn="{Binding CoolantSensorView}"/>
                        <uc:ValveStateButton ValveName="ВАКУУМ" ValveIsOn="{Binding ChuckVacuumValveView}" SensorIsOn="{Binding ChuckVacuumSensorView}"/>
                        <uc:ValveStateButton ValveName="ОБДУВ" ValveIsOn="{Binding BlowingValveView}" SensorIsOn="{Binding AirSensorView}"/>                   
                    </StackPanel>
                </Grid>
            </GroupBox>
            <Border
            Grid.RowSpan="2"
            BorderBrush="{StaticResource BorderBrush}"
            BorderThickness="0,0,3,3" />
            <!--<Border
            Grid.Column="1"
            BorderBrush="{StaticResource BorderBrush}"
            BorderThickness="3" />-->
            <!--<ContentControl Content="{Binding CutLinesVM}" Grid.RowSpan="2" Grid.Column="0"/>-->
            <ContentControl Content="{Binding CentralView}" Grid.RowSpan="2" Grid.Column="0"/>
            <ContentControl Content="{Binding RightSideView}" Grid.RowSpan="1" Grid.Column="1"/>
            <!--<Image
            Name="VideoImg"
            Grid.RowSpan="{Binding Rows[1]}"
            Grid.Column="{Binding Cols[1]}"
            Margin="3"
            Panel.ZIndex="0"
            Source="{Binding Bi, Mode=OneWay}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonDown">
                        <i:InvokeCommandAction PassEventArgsToCommand="True" 
                                               EventArgsConverter="{Binding Source={StaticResource MouseArgsConverter}}" 
                                               EventArgsConverterParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Image}}" 
                                               Command="{Binding ClickOnImageCommand, Mode=OneWay}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Image>
            <Canvas
                Grid.RowSpan="{Binding Rows[1]}"
                Grid.Column="{Binding Cols[1]}"
                Width="{Binding ElementName=VideoImg, Path=ActualWidth}"
                Height="{Binding ElementName=VideoImg, Path=ActualHeight}"
                Panel.ZIndex="1"
                ClipToBounds="True">
                <Grid Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Canvas}}" 
                      Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Canvas}}"
                      >

                    <TextBlock
                    HorizontalAlignment="Center"
                    VerticalAlignment="Top"
                    FontFamily="TimesNewRoman"
                    FontSize="3"
                    FontStyle="Normal"
                    FontWeight="Bold"
                    Foreground="OrangeRed"
                    RenderTransformOrigin="0.5,-1"
                    Text="{Binding Path=ProcessMessage}"
                    TextAlignment="Center">

                        <TextBlock.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform>
                                    <ScaleTransform.ScaleX>
                                        <MultiBinding Converter="{StaticResource GetRatioConverter}">
                                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                                            <Binding Source="{StaticResource Hundred}" />
                                        </MultiBinding>
                                    </ScaleTransform.ScaleX>
                                    <ScaleTransform.ScaleY>
                                        <MultiBinding Converter="{StaticResource GetRatioConverter}">
                                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                                            <Binding Source="{StaticResource Hundred}" />
                                        </MultiBinding>
                                    </ScaleTransform.ScaleY>
                                </ScaleTransform>
                            </TransformGroup>
                        </TextBlock.RenderTransform>
                    </TextBlock>
                    <TextBlock
                    HorizontalAlignment="Center"
                    VerticalAlignment="Top"
                    FontFamily="TimesNewRoman"
                    FontSize="3"
                    FontStyle="Normal"
                    FontWeight="Bold"
                    Foreground="GreenYellow"
                    RenderTransformOrigin="0.5,-1"
                    Text="{Binding Path=Process.CutOffset, StringFormat=Корректировка реза\, мм:  {0:N3}}"
                    TextAlignment="Center"
                    Visibility="{Binding CutWidthMarkerVisibility, Converter={StaticResource Boolean2VisibilityConverter}}">
                        --><!--<TextBlock.Text>
                            <MultiBinding Converter="{StaticResource GetRatioConverter}">
                                <Binding Path="1" FallbackValue="10"/>
                                <Binding Path="1" FallbackValue="20"/>
                            </MultiBinding>
                        </TextBlock.Text>--><!--
                        <TextBlock.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform>
                                    <ScaleTransform.ScaleX>
                                        <MultiBinding Converter="{StaticResource GetRatioConverter}">
                                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                                            <Binding Source="{StaticResource Hundred}" />
                                        </MultiBinding>
                                    </ScaleTransform.ScaleX>
                                    <ScaleTransform.ScaleY>
                                        <MultiBinding Converter="{StaticResource GetRatioConverter}">
                                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                                            <Binding Source="{StaticResource Hundred}" />
                                        </MultiBinding>
                                    </ScaleTransform.ScaleY>
                                </ScaleTransform>
                            </TransformGroup>
                        </TextBlock.RenderTransform>
                    </TextBlock>
                </Grid>
                <Rectangle
                    Name="CutWidth"
                    IsHitTestVisible="False"
                    Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Canvas}}"
                    Stroke="ForestGreen"
                    Visibility="{Binding CutWidthMarkerVisibility, Converter={StaticResource Boolean2VisibilityConverter}}"
                    RenderTransformOrigin="0 0.5"
                    StrokeThickness="1"
                    >

                    <Rectangle.Height>
                        <MultiBinding Converter="{StaticResource MulConverter}">
                            <Binding Path="CutWidthView"/>
                            <Binding Path="CameraScale"/>
                            <Binding RelativeSource="{RelativeSource AncestorType=Canvas, Mode=FindAncestor}" Path="ActualHeight"/>
                        </MultiBinding>
                    </Rectangle.Height>
                    <Rectangle.RenderTransform>
                        <TransformGroup>
                            <TranslateTransform Y="{Binding RelativeSource={RelativeSource AncestorType=Rectangle}, Path=ActualHeight, Converter={StaticResource DivideConverter}, ConverterParameter=-2}"/>
                            <TranslateTransform Y="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Canvas}, Path=ActualHeight, Converter={StaticResource DivideConverter}, ConverterParameter=2}"/>
                            <TranslateTransform>
                                <TranslateTransform.Y>
                                    <MultiBinding Converter="{StaticResource MulConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType=Canvas, Mode=FindAncestor}" Path="ActualHeight"/>
                                        <Binding Path="CameraScale"/>
                                        <Binding Path="CutOffsetView"/>
                                    </MultiBinding>
                                </TranslateTransform.Y>
                            </TranslateTransform>
                        </TransformGroup>
                    </Rectangle.RenderTransform>
                    
                </Rectangle>
                
                <Rectangle
                Name="TeachScaleMarkers"
                Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Canvas}}"
                Stroke="OrangeRed"
                StrokeThickness="1"
                Visibility="{Binding TeachVScaleMarkersVisibility, Converter={StaticResource Boolean2VisibilityConverter}, FallbackValue=Hidden}">
                    <Rectangle.Height>
                        <MultiBinding Converter="{StaticResource GetRatioConverter}">
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                            <Binding Path="TeachMarkersRatio" />
                        </MultiBinding>
                    </Rectangle.Height>
                    <Canvas.Top>
                        <MultiBinding Converter="{StaticResource TranslateConverterScheme}">
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                        </MultiBinding>
                    </Canvas.Top>
                    <Rectangle.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="1.5" ScaleY="-1" />
                            <TranslateTransform X="-10">
                                <TranslateTransform.Y>
                                    <MultiBinding Converter="{StaticResource TranslateConverterScheme}">
                                        <Binding Path="Height" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Rectangle}" />
                                    </MultiBinding>
                                </TranslateTransform.Y>
                            </TranslateTransform>
                        </TransformGroup>
                    </Rectangle.RenderTransform>
                </Rectangle>


                <Rectangle
                    Name="RealCutWidth"
                    IsHitTestVisible="False"
                    Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Canvas}}"
                    Stroke="OrangeRed"
                    Visibility="Visible"
                    RenderTransformOrigin="0 0.5"
                    StrokeThickness="1"
                    >
                    <Rectangle.Height>
                        <MultiBinding Converter="{StaticResource MulConverter}">
                            <Binding Path="RealCutWidthView"/>
                            <Binding Path="CameraScale"/>
                            <Binding RelativeSource="{RelativeSource AncestorType=Canvas, Mode=FindAncestor}" Path="ActualHeight"/>
                        </MultiBinding>
                    </Rectangle.Height>
                    <Rectangle.RenderTransform>
                        <TransformGroup>
                            <TranslateTransform Y="{Binding RelativeSource={RelativeSource AncestorType=Rectangle}, Path=ActualHeight, Converter={StaticResource DivideConverter}, ConverterParameter=-2}"/>
                            <TranslateTransform Y="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Canvas}, Path=ActualHeight, Converter={StaticResource DivideConverter}, ConverterParameter=2}"/>
                        </TransformGroup>
                    </Rectangle.RenderTransform>
                </Rectangle>

                <Path Stroke="Gold" StrokeThickness="{Binding ScaleGridView.StrokeThickness}" RenderTransformOrigin="0.5 0.5">
                    <Path.Data>
                        <GeometryGroup Children="{Binding ScaleGridView, Converter={StaticResource ScaleGridConverter}}"/>
                    </Path.Data>
                    <Path.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform>
                                <ScaleTransform.ScaleX>
                                    <MultiBinding Converter="{StaticResource MulConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType=Window, Mode=FindAncestor}" Path="DataContext.CameraScale"/>
                                        <Binding RelativeSource="{RelativeSource AncestorType=Canvas, Mode=FindAncestor}" Path="ActualHeight"/>
                                    </MultiBinding>
                                </ScaleTransform.ScaleX>
                                <ScaleTransform.ScaleY>
                                    <MultiBinding Converter="{StaticResource MulConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType=Window, Mode=FindAncestor}" Path="DataContext.CameraScale"/>
                                        <Binding RelativeSource="{RelativeSource AncestorType=Canvas, Mode=FindAncestor}" Path="ActualHeight"/>
                                    </MultiBinding>
                                </ScaleTransform.ScaleY>
                            </ScaleTransform>
                            <TranslateTransform X="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualWidth, Converter={StaticResource DivideConverter}, ConverterParameter=2}"
                                                Y="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualHeight, Converter={StaticResource DivideConverter}, ConverterParameter=2}"
                                                />
                        </TransformGroup>
                    </Path.RenderTransform>
                </Path>

                <Line
                    IsHitTestVisible="False"
                    Stroke="Red" StrokeThickness="1">
                    <Line.X1>
                        <MultiBinding Converter="{StaticResource CrossConverter}" ConverterParameter="0,3">
                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                            <Binding Source="1" />
                        </MultiBinding>
                    </Line.X1>
                    <Line.X2>
                        <MultiBinding Converter="{StaticResource CrossConverter}" ConverterParameter="0,3">
                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                            <Binding Source="2" />
                        </MultiBinding>
                    </Line.X2>
                    <Line.Y1>
                        <MultiBinding Converter="{StaticResource CrossConverter}" ConverterParameter="0,3">
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                        </MultiBinding>
                    </Line.Y1>
                    <Line.Y2>
                        <MultiBinding Converter="{StaticResource CrossConverter}" ConverterParameter="0,3">
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                        </MultiBinding>
                    </Line.Y2>
                </Line>
                <Line
                    IsHitTestVisible="False"
                    Stroke="Red" StrokeThickness="1">
                    <Line.Y1>
                        <MultiBinding Converter="{StaticResource CrossConverter}" ConverterParameter="0,3">
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                            <Binding Source="1" />
                        </MultiBinding>
                    </Line.Y1>
                    <Line.Y2>
                        <MultiBinding Converter="{StaticResource CrossConverter}" ConverterParameter="0,3">
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                            <Binding Source="2" />
                        </MultiBinding>
                    </Line.Y2>
                    <Line.X1>
                        <MultiBinding Converter="{StaticResource CrossConverter}" ConverterParameter="0,3">
                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                        </MultiBinding>
                    </Line.X1>
                    <Line.X2>
                        <MultiBinding Converter="{StaticResource CrossConverter}" ConverterParameter="0,3">
                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}" />
                        </MultiBinding>
                    </Line.X2>
                </Line>
            </Canvas>-->

        </Grid>
    </Grid>
</hc:GlowWindow>
